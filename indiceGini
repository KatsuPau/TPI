// Casi ok! faltan 2 test
float indiceGini(eph_h th, eph_i ti) {
    float res = 0.0;
     if (tablaHogaresOrdenadaPorIngresosPerCapita(th, ti)) {
        res = areaObservada(th, ti) / 0.5;
    } else {}
    return res;
}



bool tablaHogaresOrdenadaPorIngresosPerCapita(eph_h th,eph_i ti){
    bool res = false;
     int i = 0;
     while(i<th.size()-1){
         if(ingresosPerCapita(th[i],ti) <= ingresosPerCapita(th[i+1],ti)){
             res = true;
             i++;
         } else{
             res = false;
             break;
         }
     }
     return res;
}



float ingresos(hogar h,eph_i ti){
    int i = 0;
    float ingreso_ = 0.0;
    while(i<ti.size()){
        if((ti[i][p47T]>-1) && (h[HOGCODUSU] == ti[i][INDCODUSU])){
            ingreso_ = ingreso_ + ti[i][p47T];
        } else {
            // skip
        }
        i++;
    }
    return ingreso_;
}

float cantHabitantes(hogar h,eph_i ti){
    int i = 0;
    float cant = 0.0;
    while(i<ti.size()){
        if(ti[i][INDCODUSU] == h[HOGCODUSU]){
            cant = cant + 1;
        } else{
            //skip
        }
        i++;
    }
    return cant;
}

float areaObservada(eph_h th, eph_i ti){
    float s = 0.5 -  integralDeIngresosObservados(th,ti);
    return s;
}

float integralDeIngresosObservados(eph_h th,eph_i ti){
    float res = 0.0;
    int i = 0;
    int n = th.size();
    float m = (1.0/n);
    while(i<n){
        res = (ingresosHasta(i,th,ti)/ingresosHasta(n,th,ti))+(ingresosPerCapita(th[i],ti)/(ingresosHasta(n,th,ti)*(2)));
        i=i+1;
    }
    return m*res;
}

float ingresosHasta(int n,eph_h th, eph_i ti){
    int i = 0;
    float ing = 0.0;
    while(i<n){
           ing = ingresosPerCapita(th[i],ti);
           i++;
    }
    return ing;
}

float ingresosPerCapita(hogar h, eph_i ti) {
    float s = ingresos(h,ti) / cantHabitantes(h,ti);
    return s;
}





